// Complexity:

#include <bits/stdc++.h>
using namespace std;

const int N = 100; // Number of Nodes
const int INF = 10e8; // Infinity
vector <vector <pair<int, int>>> graph(N);
vector<int> dist(N, INF);
vector<bool> visited(N, 0);
priority_queue <pair<int, int>, vector< pair<int, int> >, greater< pair<int, int> > > pq; // inverse queue order

void dijkstra(int source){
    pq.push({0, source}); // push weight, source
    visited[source] = 1; // visit source
    dist[source] = 0; // dist from source to itself equals 0
    while(!pq.empty()){
        int curr_dist = pq.top().first; // Save top info
        int curr_vertex = pq.top().second;
        pq.pop();
        visited[curr_vertex] = 1; // visit current vertex
        for(auto v: graph[curr_vertex]){ //visit all neighbors of current vertex
            if(!visited[v.first]){ // if it has not been visited, then visit
                if(curr_dist + v.second < dist[v.first]){ // see if there is a better way
                    pq.push({curr_dist +  v.second, v.first}); // save in priority queue
                    dist[v.first] = curr_dist + v.second; // save distance from source to a neighbor
                }
            }
        }
    }
}

int main(){
    int vertex, fr, to, weight; cin >> vertex; // number of vertexes
    for(int i = 0; i < vertex; i++){
        cin >> fr >> to >> weight;
        graph[fr].push_back({to, weight}); // bi-directed graph with weights
        graph[to].push_back({fr, weight});
    }
    int source = 1; dijkstra(source); // prints all minimum distances from source to every other node
    for(int i = 0; i < N; i++){
        if(dist[i] != INF){ // only prints nodes reachable by source
            cout << i << " " << dist[i] << endl;
        }
    }
}
